AWSTemplateFormatVersion: '2010-09-09'
Description: Multi-container ECS Service with Fargate

Resources:
  # IAM Role for ECS Task
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ecsTaskExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # IAM Role Policy for ECS Task
  ECSRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "ecsTaskExecutionRolePolicy-${AWS::StackName}"
      Roles:
        - !Ref ECSRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "my-ecs-cluster-${AWS::StackName}"

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "multi-container-task-${AWS::StackName}"
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: "api"
          Image: "321889685634.dkr.ecr.us-east-1.amazonaws.com/inv-hq-api:latest"
          PortMappings:
            - ContainerPort: 3000
          Essential: true
        - Name: "frontend"
          Image: "321889685634.dkr.ecr.us-east-1.amazonaws.com/inv-hq-frontend:latest"
          PortMappings:
            - ContainerPort: 80
          Essential: true
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "256"
      Memory: "512"

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: "Name"
          Value: !Sub "my-vpc-${AWS::StackName}"

  # Subnets
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub "my-subnet-1-${AWS::StackName}"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub "my-subnet-2-${AWS::StackName}"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "my-internet-gateway-${AWS::StackName}"

  # Attach Internet Gateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "my-route-table-${AWS::StackName}"

  # Route
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP and custom port traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: !Sub "my-security-group-${AWS::StackName}"

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "my-load-balancer-${AWS::StackName}"
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "my-target-group-${AWS::StackName}"
      Port: 80
      Protocol: "HTTP"
      VpcId: !Ref VPC
      TargetType: "ip"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckPath: "/"

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "multi-container-service-${AWS::StackName}"
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: "FARGATE"
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: "ENABLED"
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: "frontend"
          ContainerPort: 80

Outputs:
  ECSClusterName:
    Description: "Name of the ECS cluster"
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: "Name of the ECS service"
    Value: !Ref ECSService
  LoadBalancerDNSName:
    Description: "DNS name of the load balancer"
    Value: !GetAtt LoadBalancer.DNSName